#+TITLE: An Introduction to Programming in Emacs lisp


* Evaluate elisp in doom
- c-x c-e if in typing mode
- gr return if in editing mode
- space m e e if in editing mode (last expression)
- space m e d if in editing mode (function)

* Debugger example
#+begin_src elisp
(this is an unquoted list)
'(this is an quoted list)
#+end_src

* Nested lists
#+begin_src elisp
(+ 3 (+ 2 3))
#+end_src

#+RESULTS:
: 8

* Use symbol in list
#+begin_src elisp
(+ fill-column 5)
fill-column
#+end_src

#+RESULTS:
: 80

* Concat list of strings
#+begin_src elisp
(concat "this is a " "test")
#+end_src

#+RESULTS:
: this is a test

* Subset a string
#+begin_src elisp
(substring "abcdef" 0 4)
#+end_src

#+RESULTS:
: abcd

* Concat string and symbol
#+begin_src elisp
(concat "The "
        (number-to-string (+ 2 fill-column)) " red foxes.")
#+end_src

#+RESULTS:
: The 82 red foxes.

* Many arguments to a function
#+begin_src elisp
(* 1 2 3)
#+end_src

#+RESULTS:
: 6

* Message function
#+begin_src elisp
(message "This is a message!")
(message "I %s understand elisp" "sort of")
(message (concat "The "
        (number-to-string (+ 2 fill-column)) " red %s.")
         "elephants")
#+end_src

#+RESULTS:
: The 82 red elephants.

* Seting a value to a variable
#+begin_src elisp
(set 'flowers '(rose violet daisy buttercup))
flowers

(setq more-flowers '(sunflower iris tulip))
more-flowers

(setq trees '(oak redwood fir)
      herbivores '(chicken deer elk))
trees
herbivores
#+end_src

#+RESULTS:
| chicken | deer | elk |

* Counting
#+begin_src elisp
(setq counter 0)
(setq counter (+ counter 1))
counter
#+end_src

#+RESULTS:
: 1

* Buffers
#+begin_src elisp
(buffer-name)
(buffer-file-name)
(switch-to-buffer (other-buffer))
(buffer-size)
(point)
(point-min)
(point-max)
#+end_src

#+RESULTS:
: 4742

* Functions
** Example form
;; (defun function-name (arguments...)
;;   "optional documentation string"
;;   (interactive argument-passing infor)
;;   body...)

** Simple function
#+begin_src elisp
(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))

(multiply-by-seven 7)
#+end_src

#+RESULTS:
: 49

** Make interactive
- To set prefix argument (i.e. `number' in the below function) in evil mode you
  just type the number. Or you can \ C-u number M-x function. The backslash
  allows for traditional keybindings.
#+begin_src elisp
(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (interactive "p")                     ; the 'p' tells the function to use a prefix argument for 'number'
  (message "The result is %d" (* 7 number)))
#+end_src

#+RESULTS:
: multiply-by-seven

* Reverse list
#+begin_src elisp
(let ((list '(-0.18 -0.13 -0.045 0)))
  (nreverse list))
#+end_src

#+RESULTS:
| 0 | -0.045 | -0.13 | -0.18 |

* Let expressions
- The 'let' expression binds symbols to values locally
- Example form :: (let varlist body...)
#+begin_src elisp
(let ((zebra 'stripes)
      (tiger 'fierce))
  (message "One kind of animal has %s and another is %s."
           zebra tiger))

(let ((birch 3)
      pine
      fir
      (oak 'some))
  (message
  "Here are %d variables with %s, %s, and %s value."
  birch pine fir oak))
#+end_src

#+RESULTS:
: Here are 3 variables with nil, nil, and some value.

* If expressions
#+begin_src elisp
(if (> 5 4)
    (message "5 is greater than 4!"))

(defun type-of-animal (characteristic)
  "Print message in echo area depending on CHARACTERISTIC.
If the CHARACTERISTIC is the symbol 'fierce',
then warn of a tiger"
  (if (equal characteristic 'fierce)    ; if statement
      (message "It's a tiger!")         ; then statement
    (message "It is not so fierce!")))  ; else statement

(type-of-animal 'fierce)
(type-of-animal 'zebra)

(if 'false 'true 'false)                ; the only thing that is false is nil
(if nil 'true 'false)
(> 5 4)
(> 4 5)
#+end_src

* Save excursion function
- Saves the position of the point and mark, executes a function and then
  restores to the point or mark.
- Point => current location of the cursor
- Mark => sets the end of a region; among other things. You can set the mark by
  C-SPC.

#+begin_src elisp
(message "We are %d characters into this buffer."
         (- (point)
            (save-excursion
              (goto-char (point-min)) (point))))

(message "We are %d characters into this buffer."
         (- (point) (point-min)))
#+end_src

#+RESULTS:
: We are 4188 characters into this buffer.

* Chapter 3 exercises
** Exercise 1:
#+begin_src elisp
(defun double-number (number)
    "This a function that will take a NUMBER and double it."
    (message "Your doubled number is %d"
             (* 2 number)))
(double-number 8)

(defun double-number-interact (number)
    "This a function that will take a NUMBER and double it."
    (interactive "p")
    (message "Your doubled number is %d"
             (* 2 number)))
#+end_src

#+RESULTS:
: double-number-interact

** Exercise 2:
#+begin_src elisp
(defun check-fill-column-size (number)
  "Checks whether the fill-column is larger than NUMBER."
  (interactive "p")
  (if (= number fill-column)
      (message "Correct! The fill-column is %d" number)
    (if (> number fill-column)
        (message "The fill-column is less than %d" number)
      (message "The fill-column is greater than %d" number))))
#+end_src

#+RESULTS:
: check-fill-column-size
